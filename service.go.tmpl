{{if ne .Comment ""}}
    {{.Comment}}
{{end}}

package {{.Package}}

import (
	"context"
	"errors"

	"github.com/go-kit/kit/log"

    {{if gt (len .Imports) 0}}
        {{template "imports" .Imports}}
    {{end}}
)

type Service interface {
    {{if gt (len .Endpoints) 0}}
        {{range $i,$v := .Endpoints}}
            {{template "endpoints" $v}}
        {{end}}
    {{end}}
}

func NewService(logger log.Logger) Service {
	var svc Service
	{
		svc = service{}
		svc = serviceLoggingMiddleware(log.With(logger, "method", "{{.Package}}"))(svc)
	}
	return svc
}

type service struct{}

{{if gt (len .Methods) 0}}
    {{range  $i,$v := .Methods}}
        {{if eq $v.Struct.Name ""}}
            {{template "func" $v}}
        {{else}}
            {{template "struct_function" $v}}
        {{end}}
    {{end}}
{{end}}



{{if ne .Comment ""}}
    {{.Comment}}
{{end}}
package {{.Package}}
{{if gt (len .Imports) 0}}
    {{template "imports" .Imports}}
{{end}}
{{if gt (len .Constants) 0}}
    {{template "constants" .Constants}}
{{end}}
{{if gt (len .Vars) 0}}
    {{template "vars" .Vars}}
{{end}}
{{if gt (len .Interfaces) 0}}
    {{range $i,$v := .Interfaces}}
        {{template "interface" $v}}
    {{end}}
{{end}}
{{if gt (len .Structs) 0}}
    {{range $i,$v := .Structs}}
        {{template "struct" $v}}
    {{end}}
{{end}}
{{if gt (len .Methods) 0}}
    {{range  $i,$v := .Methods}}
        {{if eq $v.Struct.Name ""}}
            {{template "func" $v}}
        {{else}}
            {{template "struct_function" $v}}
        {{end}}
    {{end}}
{{end}}

